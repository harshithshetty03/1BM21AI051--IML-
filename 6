import numpy as np
from scipy.stats import multivariate_normal

def initialize_parameters(data, num_clusters):
    np.random.seed(42)
    return np.random.rand(num_clusters, data.shape[1]), [np.eye(data.shape[1])]*num_clusters, np.ones(num_clusters) / num_clusters

def expectation(data, means, covariances, mixing_coefficients):
    responsibilities = np.array([mixing_coefficients[k] * multivariate_normal.pdf(data, means[k], covariances[k]) for k in range(len(means))]).T
    return responsibilities / responsibilities.sum(axis=1, keepdims=True)

def maximization(data, responsibilities):
    Nk = responsibilities.sum(axis=0)
    means = np.dot(responsibilities.T, data) / Nk[:, None]
    covariances = [np.dot((responsibilities[:, k, None] * (data - means[k])).T, (data - means[k])) / Nk[k] for k in range(len(Nk))]
    mixing_coefficients = Nk / data.shape[0]
    return means, covariances, mixing_coefficients

def log_likelihood(data, means, covariances, mixing_coefficients):
    return np.log(np.array([mixing_coefficients[k] * multivariate_normal.pdf(data, means[k], covariances[k]) for k in range(len(means))]).sum(axis=1)).sum()

def em_algorithm(data, num_clusters, num_iterations):
    means, covariances, mixing_coefficients = initialize_parameters(data, num_clusters)

    for _ in range(num_iterations):
        responsibilities = expectation(data, means, covariances, mixing_coefficients)
        means, covariances, mixing_coefficients = maximization(data, responsibilities)

        likelihood = log_likelihood(data, means, covariances, mixing_coefficients)
        print(f"Iteration {_ + 1}, Log Likelihood: {likelihood}")

    return means, covariances, mixing_coefficients

if __name__ == "__main__":
    np.random.seed(42)
    data1 = np.random.multivariate_normal([5, 5], [[1, 0.5], [0.5, 1]], 100)
    data2 = np.random.multivariate_normal([10, 10], [[1, -0.5], [-0.5, 1]], 100)
    data = np.vstack([data1, data2])

    num_clusters, num_iterations = 2, 10
    final_means, final_covariances, final_mixing_coefficients = em_algorithm(data, num_clusters, num_iterations)

    print("\nFinal Means:")
    print(final_means)
    print("\nFinal Covariances:")
    print(final_covariances)
    print("\nFinal Mixing Coefficients:")
    print(final_mixing_coefficients)
